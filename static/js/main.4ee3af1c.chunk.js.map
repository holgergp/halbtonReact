{"version":3,"sources":["guitar/tuner/tuner.module.scss","guitar/fret/fret.module.scss","guitar/guitar.module.scss","guitar/guitarString/guitarString.module.scss","guitar/fretboard/fretboard.module.scss","guitar/notesOnAString/notesOnAString.ts","guitar/tuner/display.tsx","guitar/tuner/tuner.tsx","guitar/fret/noteBubbles.tsx","guitar/fret/noteName.tsx","guitar/fret/fret.tsx","guitar/guitarString/guitarString.tsx","guitar/fretboard/fretboard.tsx","guitar/guitar.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","notec","name","targetName","noted","notee","notef","noteg","notea","noteb","halftones","standardTuning","1","2","3","4","5","6","standardTuningInfo","tuning","tunings","stringNumbers","Object","keys","map","s","parseInt","markNotesOnAString","stringNumber","rootNoteName","offset","offsetNote","findOffsetNote","fretboardWith","frets","fret","fretnumber","rootNote","markNotesOnTheFretboard","tuningName","find","t","getTuningForName","reduce","fretboard","a","b","rootNoteIndex","findIndex","targetNoteIndex","length","startNote","fretNumberArray","Array","noteIndexNormalized","ton","i","notesOnAString","className","styles","display","changeFretboard","useState","rootnoteName","setRootnoteName","setOffset","setTuningName","setOffsetNote","isNumber","shouldBeNumber","isNaN","tuner","value","onChange","evt","newRootNoteName","target","key","type","newOffset","console","log","newTuningName","noteClass","noteName","toggleNotes","setToggleNotes","useHotkeys","toggleNoteClass","fretsMarkup","string","guitarString","fretBoardMarkup","values","setFretboard","guitar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ee3af1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tuner\":\"tuner_tuner__3av-g\",\"tuner--offset\":\"tuner_tuner--offset__1uif8\",\"tuner--rootNote\":\"tuner_tuner--rootNote__1JC8z\",\"tuner--tuning\":\"tuner_tuner--tuning__1AjIa\",\"display\":\"tuner_display__23k8Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fret\":\"fret_fret__3yV_Y\",\"fret__fretName\":\"fret_fret__fretName__1xMon\",\"note__offset\":\"fret_note__offset__1kLKy\",\"note__root\":\"fret_note__root__3VENQ\",\"wiggle\":\"fret_wiggle__28cKw\",\"note__notVisible\":\"fret_note__notVisible__3usZP\",\"notename--notesInvisible\":\"fret_notename--notesInvisible__dTa0Y\",\"notename--notesVisible\":\"fret_notename--notesVisible__3-swB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guitar\":\"guitar_guitar__Hb91Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guitarString\":\"guitarString_guitarString__2QO1J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fretboard\":\"fretboard_fretboard__31Qo3\"};","import { Fret, Fretboard, Note, Tuning, TuningInfo } from './types';\n\nconst NUMBER_OF_FRETS = 20;\n\nexport const notec = { name: 'C', targetName: 'C' };\nexport const noted = { name: 'D', targetName: 'D' };\nexport const notecsharp = { name: 'C#', targetName: 'C#/D\\u266D' };\nexport const notedsharp = { name: 'D#', targetName: 'D#/E\\u266D' };\nexport const notee = { name: 'E', targetName: 'E' };\nexport const notef = { name: 'F', targetName: 'F' };\nexport const notefsharp = { name: 'F#', targetName: 'F#/G\\u266D' };\nexport const noteg = { name: 'G', targetName: 'G' };\nexport const notegsharp = { name: 'G#', targetName: 'G#/A\\u266D' };\nexport const notea = { name: 'A', targetName: 'A' };\nexport const noteasharp = { name: 'A#', targetName: 'A#/H\\u266D' };\nexport const noteb = { name: 'B', targetName: 'B/H' };\n\nexport const halftones = [\n  notec,\n  notecsharp,\n  noted,\n  notedsharp,\n  notee,\n  notef,\n  notefsharp,\n  noteg,\n  notegsharp,\n  notea,\n  noteasharp,\n  noteb,\n];\n\nexport const standardTuning: Tuning = {\n  1: notee,\n  2: notea,\n  3: noted,\n  4: noteg,\n  5: noteb,\n  6: notee,\n};\n\nexport const dropd: Tuning = {\n  1: notee,\n  2: notea,\n  3: noted,\n  4: noteg,\n  5: noteb,\n  6: noted,\n};\n\nexport const dropc: Tuning = {\n  1: noted,\n  2: notea,\n  3: notef,\n  4: notec,\n  5: noteg,\n  6: notec,\n};\n\nexport const standardTuningInfo = { name: 'Standard', tuning: standardTuning };\nexport const tunings: TuningInfo[] = [\n  standardTuningInfo,\n  { name: 'DropD', tuning: dropd },\n  { name: 'DropC', tuning: dropc },\n];\n\nconst getTuningForName = (tuningName: string): Tuning => {\n  const tuning = tunings.find((t) => t.name === tuningName);\n  return tuning ? tuning.tuning : standardTuning;\n};\n\nconst stringNumbers = (tuning: Tuning): number[] =>\n  Object.keys(tuning).map((s) => parseInt(s));\n\nconst markNotesOnAString = (\n  stringNumber: number,\n  rootNoteName: string,\n  offset: number,\n  tuning: Tuning\n): Fret[] => {\n  const offsetNote = findOffsetNote(rootNoteName, offset);\n  return fretboardWith(tuning)[stringNumber].frets.map(\n    (fret: Fret, fretnumber: number) => ({\n      ...fret,\n      offsetNote: fret.targetName === offsetNote.targetName,\n      rootNote: fret.targetName === rootNoteName,\n      fretnumber,\n    })\n  );\n};\n\nexport const markNotesOnTheFretboard = (\n  rootNoteName: string,\n  offset: number,\n  tuningName: string\n): Fretboard => {\n  const tuning = getTuningForName(tuningName);\n  return stringNumbers(tuning).reduce<Fretboard>(\n    (fretboard: Fretboard, stringNumber: number) => {\n      fretboard[stringNumber] = {\n        frets: markNotesOnAString(stringNumber, rootNoteName, offset, tuning),\n        stringNumber,\n      };\n      return fretboard;\n    },\n    {} as Fretboard\n  );\n};\n//JS modulo fn gives negative values for negative inputs ...\nconst mod = (a: number, b: number): number => {\n  return ((a % b) + b) % b;\n};\n\nexport const findOffsetNote = (rootNoteName: string, offset: number): Note => {\n  const rootNoteIndex = halftones.findIndex(\n    (t: Note) => t.targetName === rootNoteName\n  );\n  const targetNoteIndex = mod(rootNoteIndex + offset, halftones.length);\n  return halftones[targetNoteIndex];\n};\n\nconst notesOnAString = (stringNumber: number, tuning: Tuning): Note[] => {\n  const startNote = tuning[stringNumber];\n  const fretNumberArray = [...Array(NUMBER_OF_FRETS).keys()];\n  const noteIndexNormalized = halftones.findIndex(\n    (ton: Note) => ton === startNote\n  );\n\n  return fretNumberArray.map((i: number) => {\n    return halftones[(noteIndexNormalized + i) % halftones.length];\n  }, fretNumberArray);\n};\n\nconst frets = (stringNumber: number, tuning: Tuning): Fret[] =>\n  notesOnAString(stringNumber, tuning).map((fret, fretnumber) => ({\n    ...fret,\n    offsetNote: false,\n    rootNote: false,\n    fretnumber,\n  }));\n\nexport const fretboardWith = (tuning: Tuning): Fretboard => {\n  return stringNumbers(tuning).reduce(\n    (fretboard: Fretboard, stringNumber: number) => {\n      fretboard[stringNumber] = {\n        frets: frets(stringNumber, tuning),\n        stringNumber,\n      };\n      return fretboard;\n    },\n    {} as Fretboard\n  );\n};\n","import React from 'react';\nimport { Note } from '../notesOnAString/types';\nimport styles from './tuner.module.scss';\n\ninterface Props {\n  offsetNote: Note;\n}\nexport default ({ offsetNote }: Props): JSX.Element => {\n  return <div className={styles.display}>{offsetNote.name}</div>;\n};\n","import React, { useState } from 'react';\nimport {\n  notec,\n  standardTuningInfo,\n  markNotesOnTheFretboard,\n  findOffsetNote,\n  halftones,\n  tunings,\n} from '../notesOnAString/notesOnAString';\nimport { Fretboard } from '../notesOnAString/types';\nimport Display from './display';\nimport styles from './tuner.module.scss';\n\ninterface Props {\n  changeFretboard: (fretboard: Fretboard) => void;\n}\n\nexport default ({ changeFretboard }: Props): JSX.Element => {\n  const [rootnoteName, setRootnoteName] = useState(notec.targetName);\n  const [offset, setOffset] = useState('0');\n  const [tuningName, setTuningName] = useState(standardTuningInfo.name);\n\n  const [offsetNote, setOffsetNote] = useState(notec);\n\n  const isNumber = (shouldBeNumber: string) => {\n    return !!shouldBeNumber || isNaN(+shouldBeNumber);\n  };\n  return (\n    <form className={styles.tuner}>\n      <span>Wenn ich vom Grundton</span>\n      <select\n        className={styles['tuner--rootNote']}\n        value={rootnoteName}\n        onChange={(evt) => {\n          const newRootNoteName = evt.target.value;\n          setRootnoteName(newRootNoteName);\n          if (!isNumber(offset)) {\n            return;\n          }\n          changeFretboard(\n            markNotesOnTheFretboard(\n              newRootNoteName,\n              parseInt(offset),\n              standardTuningInfo.name\n            )\n          );\n          setOffsetNote(findOffsetNote(newRootNoteName, parseInt(offset)));\n        }}\n      >\n        {halftones.map((t) => {\n          return (\n            <option key={t.name} value={t.targetName}>\n              {t.name}\n            </option>\n          );\n        })}\n      </select>\n\n      <input\n        className={styles['tuner--offset']}\n        type=\"number\"\n        value={offset}\n        onChange={(evt) => {\n          const newOffset = evt.target.value;\n          setOffset(newOffset);\n          console.log(isNaN(+newOffset));\n          if (!isNumber(newOffset)) {\n            return;\n          }\n          changeFretboard(\n            markNotesOnTheFretboard(\n              rootnoteName,\n              parseInt(newOffset),\n              standardTuningInfo.name\n            )\n          );\n\n          setOffsetNote(findOffsetNote(rootnoteName, parseInt(newOffset)));\n        }}\n      />\n      <span>Schritte weitergehe und</span>\n      <select\n        className={styles['tuner--tuning']}\n        value={tuningName}\n        onChange={(evt) => {\n          const newTuningName = evt.target.value;\n          setTuningName(newTuningName);\n          if (!isNumber(offset)) {\n            return;\n          }\n          changeFretboard(\n            markNotesOnTheFretboard(\n              rootnoteName,\n              parseInt(offset),\n              newTuningName\n            )\n          );\n        }}\n      >\n        {tunings.map((t) => {\n          return (\n            <option key={t.name} value={t.name}>\n              {t.name}\n            </option>\n          );\n        })}\n      </select>\n      <span>Tuning verwende, lande ich beim</span>\n      <Display offsetNote={offsetNote} />\n    </form>\n  );\n};\n","import React from 'react';\nimport styles from './fret.module.scss';\n\ninterface Props {\n  offsetNote?: boolean;\n  rootNote?: boolean;\n}\n\nexport default ({ offsetNote = false, rootNote = false }: Props) => {\n  let noteClass = '';\n  if (rootNote) {\n    noteClass = 'note__root';\n  } else if (offsetNote) {\n    noteClass = 'note__offset';\n  } else {\n    noteClass = 'note__notVisible';\n  }\n  return (\n    <div className=\"note\">\n      <div className={styles[noteClass]}></div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useHotkeys } from 'react-hotkeys-hook';\nimport styles from './fret.module.scss';\n\ninterface Props {\n  noteName: string;\n}\n\nexport default ({ noteName }: Props) => {\n  const [toggleNotes, setToggleNotes] = useState(false);\n  useHotkeys('ctrl+k', () =>\n    setToggleNotes((toggleNotes) => {\n      return !toggleNotes;\n    })\n  );\n  const toggleNoteClass = toggleNotes\n    ? 'notename--notesVisible'\n    : 'notename--notesInvisible';\n\n  return <div className={styles[toggleNoteClass]}>{noteName}</div>;\n};\n","import React from 'react';\nimport { Fret } from '../notesOnAString/types';\nimport NoteBubble from './noteBubbles';\nimport NoteName from './noteName';\nimport styles from './fret.module.scss';\n\ninterface Props {\n  fret: Fret;\n}\n\nexport default ({ fret }: Props): JSX.Element => {\n  const { offsetNote, rootNote, name } = fret;\n  return (\n    <span className={styles.fret}>\n      <NoteBubble rootNote={rootNote} offsetNote={offsetNote} />\n      <NoteName noteName={name} />\n    </span>\n  );\n};\n","import React from 'react';\nimport Fret from '../fret/fret';\nimport { GuitarString } from '../notesOnAString/types';\nimport styles from './guitarString.module.scss';\n\ninterface Props {\n  string: GuitarString;\n}\nexport default ({ string }: Props): JSX.Element => {\n  const fretsMarkup = string.frets.map((fret) => {\n    return <Fret key={fret.fretnumber} fret={fret} />;\n  });\n  return <div className={styles.guitarString}>{fretsMarkup}</div>;\n};\n","import React from 'react';\nimport GuitarString from '../guitarString/guitarString';\nimport { Fretboard } from '../notesOnAString/types';\nimport styles from './fretboard.module.scss';\n\ninterface Props {\n  fretboard: Fretboard;\n}\n\nexport default ({ fretboard }: Props): JSX.Element => {\n  const fretBoardMarkup = Object.values(fretboard).map((string) => {\n    return (\n      <div key={string.stringNumber} className={styles.fretboard}>\n        <GuitarString string={string} />\n      </div>\n    );\n  });\n  return <div>{fretBoardMarkup}</div>;\n};\n","import React, { useState } from 'react';\nimport {\n  markNotesOnTheFretboard,\n  notec,\n  standardTuningInfo,\n} from './notesOnAString/notesOnAString';\nimport styles from './guitar.module.scss';\n\nimport Tuner from './tuner/tuner';\nimport Fretboard from './fretboard/fretboard';\n\nexport default (): JSX.Element => {\n  const [fretboard, setFretboard] = useState(\n    markNotesOnTheFretboard(notec.targetName, 0, standardTuningInfo.name)\n  );\n\n  return (\n    <div className={styles.guitar}>\n      <Tuner changeFretboard={setFretboard} />\n      <Fretboard fretboard={fretboard} />\n\n      <footer>Press CTRL+k to toggle notenames</footer>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Guitar from './guitar/guitar';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Guitar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}