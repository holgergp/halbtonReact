{"version":3,"sources":["notesOnAString.ts","tuner.tsx","frets.tsx","strings.tsx","fretboard.tsx","display.tsx","guitar.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["notec","name","targetName","noted","notee","notef","noteg","notea","noteb","halftones","standardTuning","1","2","3","4","5","6","standardTuningInfo","tuning","tunings","stringNumbers","Object","keys","map","s","parseInt","markRootNoteOnAString","stringNumber","rootNoteName","fretboardWith","frets","fret","fretnumber","rootNote","markOffsetNoteOnAString","offset","offsetNote","findOffsetNote","note","markOffsetNoteOnTheFretBoard","tuningName","find","t","getTuningForName","reduce","fretboard","targetNoteIndex","findIndex","length","startNote","fretNumberArray","Array","noteIndexNormalized","ton","i","notesOnAString","changeFretboard","setOffsetNote","useState","rootnoteName","setRootnoteName","setOffset","setTuningName","value","onChange","evt","newRootNoteName","target","key","type","newOffset","newTuningName","noteClass","className","fretsMarkup","string","fretBoardMarkup","values","setFretboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e772b21.chunk.js","sourcesContent":["import { Fret, Fretboard, Note, Tuning, TuningInfo } from './types';\n\nconst NUMBER_OF_FRETS = 20;\n\nexport const notec = { name: 'C', targetName: 'C' };\nconst notecsharp = { name: 'C#', targetName: 'C#/D\\u266D' };\nconst noted = { name: 'D', targetName: 'D' };\nconst notedsharp = { name: 'D#', targetName: 'D#/E\\u266D' };\nconst notee = { name: 'E', targetName: 'E' };\nconst notef = { name: 'F', targetName: 'F' };\nconst notefsharp = { name: 'F#', targetName: 'F#/G\\u266D' };\nconst noteg = { name: 'G', targetName: 'G' };\nconst notegsharp = { name: 'G#', targetName: 'G#/A\\u266D' };\nconst notea = { name: 'A', targetName: 'A' };\nconst noteasharp = { name: 'A#', targetName: 'A#/H\\u266D' };\nconst noteb = { name: 'B', targetName: 'B/H' };\n\n// const noNote = { targetName: 'noNote' };\n\nexport const halftones = [\n  notec,\n  notecsharp,\n  noted,\n  notedsharp,\n  notee,\n  notef,\n  notefsharp,\n  noteg,\n  notegsharp,\n  notea,\n  noteasharp,\n  noteb,\n];\n\nexport const standardTuning: Tuning = {\n  1: notee,\n  2: notea,\n  3: noted,\n  4: noteg,\n  5: noteb,\n  6: notee,\n};\n\nexport const dropd: Tuning = {\n  1: notee,\n  2: notea,\n  3: noted,\n  4: noteg,\n  5: noteb,\n  6: noted,\n};\n\nexport const dropc: Tuning = {\n  1: noted,\n  2: notea,\n  3: notef,\n  4: notec,\n  5: noteg,\n  6: notec,\n};\n\nexport const standardTuningInfo = { name: 'Standard', tuning: standardTuning };\nexport const tunings: TuningInfo[] = [\n  standardTuningInfo,\n  { name: 'DropD', tuning: dropd },\n  { name: 'DropC', tuning: dropc },\n];\n\nconst getTuningForName = (tuningName: string): Tuning => {\n  const tuning = tunings.find((t) => t.name === tuningName);\n  return tuning ? tuning.tuning : standardTuning;\n};\n\nconst stringNumbers = (tuning: Tuning): number[] =>\n  Object.keys(tuning).map((s) => parseInt(s));\n\nconst markRootNoteOnAString = (\n  stringNumber: number,\n  rootNoteName: string,\n  tuning: Tuning\n): Fret[] => {\n  return fretboardWith(tuning)[stringNumber].frets.map(\n    (fret: Fret, fretnumber: number) => ({\n      ...fret,\n      rootNote: fret.targetName === rootNoteName,\n      fretnumber,\n    })\n  );\n};\n\nconst markOffsetNoteOnAString = (\n  stringNumber: number,\n  rootNoteName: string,\n  offset: number,\n  tuning: Tuning\n): Fret[] => {\n  const offsetNote = findOffsetNote(rootNoteName, offset);\n  return fretboardWith(tuning)[stringNumber].frets.map(\n    (fret: Fret, fretnumber: number) => ({\n      ...fret,\n      note: fret.targetName === offsetNote.name,\n      rootNote: fret.targetName === rootNoteName,\n      fretnumber,\n    })\n  );\n};\n\nexport const markRootNoteOnTheFretBoard = (\n  rootNoteName: string,\n  tuning: Tuning\n): Fretboard => {\n  return stringNumbers(tuning).reduce((fretboard, stringNumber) => {\n    fretboard[stringNumber] = {\n      frets: markRootNoteOnAString(stringNumber, rootNoteName, tuning),\n      stringNumber,\n    };\n    return fretboard;\n  }, {} as Fretboard);\n};\n\nexport const markOffsetNoteOnTheFretBoard = (\n  rootNoteName: string,\n  offset: number,\n  tuningName: string\n): Fretboard => {\n  const tuning = getTuningForName(tuningName);\n  return stringNumbers(tuning).reduce<Fretboard>(\n    (fretboard: Fretboard, stringNumber: number) => {\n      fretboard[stringNumber] = {\n        frets: markOffsetNoteOnAString(\n          stringNumber,\n          rootNoteName,\n          offset,\n          tuning\n        ),\n        stringNumber,\n      };\n      return fretboard;\n    },\n    {} as Fretboard\n  );\n};\n\nexport const findOffsetNote = (rootNoteName: string, offset: number): Note => {\n  const rootNoteIndex = halftones.findIndex(\n    (t: Note) => t.targetName === rootNoteName\n  );\n  const targetNoteIndex = (rootNoteIndex + offset) % halftones.length;\n  return halftones[targetNoteIndex];\n};\n\nconst notesOnAString = (stringNumber: number, tuning: Tuning): Note[] => {\n  const startNote = tuning[stringNumber];\n  const fretNumberArray = [...Array(NUMBER_OF_FRETS).keys()];\n  const noteIndexNormalized = halftones.findIndex(\n    (ton: Note) => ton === startNote\n  );\n\n  return fretNumberArray.map((i: number) => {\n    return halftones[(noteIndexNormalized + i) % halftones.length];\n  }, fretNumberArray);\n};\n\nconst frets = (stringNumber: number, tuning: Tuning): Fret[] =>\n  notesOnAString(stringNumber, tuning).map((fret, fretnumber) => ({\n    ...fret,\n    note: false,\n    rootNote: false,\n    fretnumber,\n  }));\n\nexport const fretboardWith = (tuning: Tuning): Fretboard => {\n  return stringNumbers(tuning).reduce(\n    (fretboard: Fretboard, stringNumber: number) => {\n      fretboard[stringNumber] = {\n        frets: frets(stringNumber, tuning),\n        stringNumber,\n      };\n      return fretboard;\n    },\n    {} as Fretboard\n  );\n};\n","import React, { useState } from 'react';\nimport { Fretboard, Note } from './types';\nimport {\n  findOffsetNote,\n  halftones,\n  markOffsetNoteOnTheFretBoard,\n  notec,\n  standardTuningInfo,\n  tunings,\n} from './notesOnAString';\n\ninterface Props {\n  changeFretboard: (fretboard: Fretboard) => void;\n  setOffsetNote: (offsetNote: Note) => void;\n}\n\nexport default ({ changeFretboard, setOffsetNote }: Props): JSX.Element => {\n  const [rootnoteName, setRootnoteName] = useState(notec.targetName);\n  const [offset, setOffset] = useState(0);\n  const [tuningName, setTuningName] = useState(standardTuningInfo.name);\n\n  return (\n    <div>\n      <form>\n        <select\n          value={rootnoteName}\n          onChange={(evt) => {\n            const newRootNoteName = evt.target.value;\n            setRootnoteName(newRootNoteName);\n            changeFretboard(\n              markOffsetNoteOnTheFretBoard(\n                newRootNoteName,\n                offset,\n                standardTuningInfo.name\n              )\n            );\n            setOffsetNote(findOffsetNote(rootnoteName, offset));\n          }}\n        >\n          {halftones.map((t) => {\n            return (\n              <option key={t.name} value={t.targetName}>\n                {t.name}\n              </option>\n            );\n          })}\n        </select>\n        <input\n          type=\"number\"\n          value={offset}\n          onChange={(evt) => {\n            const newOffset = parseInt(\n              evt.target.value ? evt.target.value : '0'\n            );\n            setOffset(newOffset);\n            changeFretboard(\n              markOffsetNoteOnTheFretBoard(\n                rootnoteName,\n                newOffset,\n                standardTuningInfo.name\n              )\n            );\n            setOffsetNote(findOffsetNote(rootnoteName, offset));\n          }}\n        />\n        <select\n          value={tuningName}\n          onChange={(evt) => {\n            const newTuningName = evt.target.value;\n            setTuningName(newTuningName);\n            changeFretboard(\n              markOffsetNoteOnTheFretBoard(rootnoteName, offset, newTuningName)\n            );\n          }}\n        >\n          {tunings.map((t) => {\n            return (\n              <option key={t.name} value={t.name}>\n                {t.name}\n              </option>\n            );\n          })}\n        </select>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Fret } from './types';\n\ninterface Props {\n  fret: Fret;\n}\n\nexport default ({ fret }: Props): JSX.Element => {\n  const { note, rootNote } = fret;\n  let noteClass = 'note';\n  if (rootNote) {\n    noteClass += ' root';\n  } else if (!note) {\n    noteClass += ' notDisplayed';\n  }\n  return (\n    <span className={'fret'}>\n      <div className={noteClass}></div>\n    </span>\n  );\n};\n","import React from 'react';\nimport Fret from './frets';\nimport { GuitarString } from './types';\n\ninterface Props {\n  string: GuitarString;\n}\nexport default ({ string }: Props): JSX.Element => {\n  const fretsMarkup = string.frets.map((fret) => {\n    return <Fret key={fret.fretnumber} fret={fret} />;\n  });\n  return <div className=\"string\">{fretsMarkup}</div>;\n};\n","import React from 'react';\nimport String from './strings';\nimport { Fretboard } from './types';\n\ninterface Props {\n  fretboard: Fretboard;\n}\n\nexport default ({ fretboard }: Props): JSX.Element => {\n  const fretBoardMarkup = Object.values(fretboard).map((string) => {\n    return (\n      <div key={string.stringNumber} className=\"fretboard\">\n        <String string={string} />\n      </div>\n    );\n  });\n  return <div>{fretBoardMarkup}</div>;\n};\n","import React from 'react';\nimport { Note } from './types';\n\ninterface Props {\n  offsetNote: Note;\n}\nexport default ({ offsetNote }: Props): JSX.Element => {\n  return <div>{offsetNote.name}</div>;\n};\n","import React, { useState } from 'react';\nimport {\n  markRootNoteOnTheFretBoard,\n  standardTuning,\n  notec,\n} from './notesOnAString';\nimport Tuner from './tuner';\nimport Fretboard from './fretboard';\nimport Display from './display';\n\nexport default (): JSX.Element => {\n  const [fretboard, setFretboard] = useState(\n    markRootNoteOnTheFretBoard('E', standardTuning)\n  );\n\n  const [offsetNote, setOffsetNote] = useState(notec);\n  return (\n    <div>\n      <Tuner changeFretboard={setFretboard} setOffsetNote={setOffsetNote} />\n      <Display offsetNote={offsetNote} />\n      <Fretboard fretboard={fretboard} />\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport Guitar from './guitar';\n\nfunction App() {\n  return (\n    <div>\n      <Guitar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}